{"version":3,"sources":["components/CarCard/index.js","components/Wrapper/index.js","components/Title/index.js","components/Scoreboard/index.js","components/PlayerMessage/index.js","App.js","serviceWorker.js","index.js"],"names":["CarCard","props","className","onClick","toggle","data-clicked","clicked","alt","src","Wrapper","children","Title","Scoreboard","score","highscore","PlayerMessage","message","randomizeCars","array","i","length","randomIndex","Math","floor","random","fourPerRow","start","end","newRow","push","App","state","cars","row1","row2","row3","toggleClicked","event","preventDefault","clickedCar","target","filtered","filter","car","carIdx","indexOf","newScore","setState","map","currScore","this","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.253719f6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nfunction CarCard(props) {\n    return (\n        <div className=\"img-container\">\n            <button onClick={props.toggle} data-clicked={props.clicked}>\n                <img\n                    alt={props.alt}\n                    src={props.src}\n                />\n            </button>\n        </div>\n    )\n}\n\nexport default CarCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Scoreboard(props) {\n    return (\n        <div className=\"scoreboard\">\n            <h3 className=\"score\"><span className=\"textAlignLeft\">Current Score: {props.score}</span><span className=\"textAlignRight\">High Score: {props.highscore}</span></h3>\n        </div>\n    );\n}\n\nexport default Scoreboard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction PlayerMessage(props) {\n    return (\n        <div className=\"player-msg\">\n            <h3 className=\"message\">{props.message}</h3>\n        </div>\n    );\n}\n\nexport default PlayerMessage;\n","// imports\nimport React, { Component } from \"react\";\nimport CarCard from \"./components/CarCard\"\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport cars from \"./cars.json\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport PlayerMessage from \"./components/PlayerMessage\"\n\n// functions\n\nfunction randomizeCars(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const randomIndex = Math.floor(Math.random() * (i + 1));\n    [array[i], array[randomIndex]] = [array[randomIndex], array[i]];\n  }\n}\n\nfunction fourPerRow(array, start, end) {\n  const newRow = []\n  for (let i = start; i <= end; i++) {\n    newRow.push(array[i])\n  }\n  return newRow;\n}\n\nclass App extends Component {\n  state = {\n    highscore: 0,\n    score: 0,\n    cars,\n    row1: fourPerRow(cars, 0, 3), \n    row2: fourPerRow(cars, 4, 7),\n    row3: fourPerRow(cars, 8, 11),\n    message: \"\"\n  };\n\n  componentDidMount() {\n    randomizeCars(this.state.cars);\n    this.setState({cars})\n    this.setState({row1: fourPerRow(cars, 0, 3)})\n    this.setState({row2: fourPerRow(cars, 4, 7)})\n    this.setState({row3: fourPerRow(cars, 8, 11)})\n  }\n\n\n  toggleClicked = event => {\n    event.preventDefault();\n\n    // get the clicked car name\n    let clickedCar = event.target.alt;\n\n    // find car out of cars array, filter returns array, so have to retrieve index 0\n    let filtered = cars.filter(car => car.alt === clickedCar)[0];\n\n    // get index of that car\n    let carIdx = cars.indexOf(filtered);\n    if (filtered.clicked === false) {\n      cars[carIdx].clicked = true;\n      let newScore = this.state.score + 1;\n      this.setState({ score: newScore });\n      if (newScore === 12) {\n        this.setState({ message: \"You Win!\" });\n        this.setState({ highscore: newScore });\n      } else {\n        this.setState({ message: \"You guessed correctly.\" });\n      }\n    } else if (filtered.clicked === true) {\n      // if user selects a car they've already chosen, reset all cars to false and start over\n      cars.map(car => (car.clicked = false));\n\n      let currScore = this.state.score;\n      let currHigh = this.state.highscore;\n\n      if (currScore >= currHigh) {\n        // update high score\n        this.setState({ highscore: currScore });\n        // reset score to 0\n        this.setState({ score: 0 });\n      } else {\n        // reset score to 0\n        this.setState({ score: 0 });\n      }\n      this.setState({ message: \"Incorrect guess, you lose.\" });\n    } else {\n      // pass silently\n    }\n\n    randomizeCars(this.state.cars);\n    this.setState({cars})\n    this.setState({row1: fourPerRow(cars, 0, 3)})\n    this.setState({row2: fourPerRow(cars, 4, 7)})\n    this.setState({row3: fourPerRow(cars, 8, 11)})\n\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Rally Car Memory Game</Title>\n        <Scoreboard highscore={this.state.highscore} score={this.state.score} />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-12\">\n              <div className=\"row\">\n                {this.state.row1.map(car => (\n                  <CarCard\n                    id={car.id}\n                    key={car.id}\n                    alt={car.alt}\n                    src={car.src}\n                    clicked={car.clicked}\n                    toggle={this.toggleClicked}\n                  />\n                ))}\n              </div>\n              <div className=\"row\">\n                {this.state.row2.map(car => (\n                  <CarCard\n                    id={car.id}\n                    key={car.id}\n                    alt={car.alt}\n                    src={car.src}\n                    clicked={car.clicked}\n                    toggle={this.toggleClicked}\n                  />\n                ))}\n\n              </div>\n              <div className=\"row\">\n                {this.state.row3.map(car => (\n                  <CarCard\n                    id={car.id}\n                    key={car.id}\n                    alt={car.alt}\n                    src={car.src}\n                    clicked={car.clicked}\n                    toggle={this.toggleClicked}\n                  />\n                ))}\n\n              </div>\n\n            </div>\n          </div>\n        </div>\n        <PlayerMessage message={this.state.message} />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}